#!/bin/bash

if [[ $# -lt 1 ]]; then
    echo ""
    echo "  Missing arguments, exiting"
    echo "  tacl --help for help"
    echo "  tacl --data-guide for a longer explanation"
    echo ""
    exit 1
fi

pnum_from_uname() {
    echo $1 | sed 's/p\(.*\)-\(.*\)/p\1/g'
}

collect_credentials() {
    if [[ $@ == *"--pnum"* ]]; then
        USERNAME=null; PASSWORD=null; OTP=null
    else
        read -p 'User > ' USERNAME
        read -s -p 'Password > ' PASSWORD; echo
        read -p 'OTP > ' OTP
    fi
}

exit_if_is_directory() {
    if [[ -d $1 ]]; then
        echo 'Input data is a directory'
        echo 'This method handles files only'
        exit 1
    fi
}

optionally_append_extension_to_file() {
    if [[ $1 == 'none' ]]; then
        dest_file=$2.$3
    else
        dest_file=$2
    fi
}

do_file_upload() {
    exit_if_is_directory "$INPUT_DATA"
    if [[ ! -z $UPLOAD_ID ]]; then
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$INPUT_DATA" \
            --user_name $USERNAME --password $PASSWORD --otp $OTP \
            --upload-id $UPLOAD_ID --backend $BACKEND
        exit 0
    else
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$INPUT_DATA" \
            --user_name $USERNAME --password $PASSWORD --otp $OTP \
            --backend $BACKEND
        exit 0
    fi
}

import_data() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --env)       API_ENV=$2; shift 2 ;;
            --pre)       PRE=$2; shift 2 ;;
            --post)      POST=$2; shift 2 ;;
            --data)      INPUT_DATA=$2; shift 2 ;;
            --import)    INPUT_DATA=$2; shift 2 ;;
            --recipient) RECIPIENT=$2; shift 2 ;;
            --group)     GROUP=$2; shift 2 ;;
            --upload-id) UPLOAD_ID=$2; shift 2 ;;
            --pnum)      PNUM=$2; shift 2 ;;
            --backend)   BACKEND=$2; shift 2 ;;
            *)           shift ;;
        esac
    done

    if [[ $POST == '' ]]; then
        POST='none'
    fi

    if [[ $API_ENV == '' ]]; then
        API_ENV='prod'
    fi

    if [[ -z $PNUM ]]; then
        PNUM=$(pnum_from_uname $USERNAME)
    fi

    if [[ $GROUP == '' ]]; then
        GROUP="$PNUM-member-group"
    fi

    # Files
    # -----

    if [[ $PRE == '' ]]; then
        do_file_upload
    elif [[ $PRE == 'compress' ]]; then
        echo 'data import with compression'
        exit_if_is_directory "$INPUT_DATA"
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'gz'
        gzip -9 < "$INPUT_DATA" |
        tacl_data --tsd_api_key \
            --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0
    elif [[ $PRE == 'encrypt' ]]; then
        echo 'data import with encryption'
        exit_if_is_directory "$INPUT_DATA"
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'aes'
        PW=$(openssl rand -base64 10)
        ENCPW=$(echo $PW | gpg -r $RECIPIENT --encrypt | openssl base64 -A)
        openssl enc -aes-256-cbc -in "$INPUT_DATA" -a -pass file:<( echo $PW ) |
        tacl_data --tsd_api_key \
            --encryptedpw $ENCPW --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0
    elif [[ $PRE == *"compress"* ]] && [[ $PRE == *"encrypt"* ]]; then
        echo 'data import with compression and encryption'
        exit_if_is_directory "$INPUT_DATA"
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'gz.aes'
        PW=$(openssl rand -base64 10)
        ENCPW=$(echo $PW | gpg -r $RECIPIENT --encrypt | openssl base64 -A)
        gzip -9 < "$INPUT_DATA" |
        openssl enc -aes-256-cbc -in "$INPUT_DATA" -a -pass file:<( echo $PW ) |
        tacl_data --tsd_api_key \
            --encryptedpw $ENCPW --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0

    # Directories
    # -----------

    elif [[ $PRE == 'archive' ]]; then
        echo 'data import with tar'
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'tar'
        tar -cf - "$INPUT_DATA" |
        tacl_data --tsd_api_key \
            --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0
    elif [[ $PRE == *"archive"* ]] && [[ $PRE == *"compress"* ]] && [[ $PRE == *"encrypt"* ]]; then
        echo 'data import with tar, compress, and encrypt'
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'tar.gz.aes'
        PW=$(openssl rand -base64 10)
        ENCPW=$(echo $PW | gpg -r $RECIPIENT --encrypt | openssl base64 -A)
        tar -cf - "$INPUT_DATA" |
        gzip -9 |
        openssl enc -aes-256-cbc -a -pass file:<( echo $PW ) |
        tacl_data --tsd_api_key \
            --encryptedpw $ENCPW \
            --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0
    elif [[ $PRE == *"archive"* ]] && [[ $PRE == *"encrypt"* ]]; then
        echo 'data import with tar and encrypt'
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'tar.aes'
        PW=$(openssl rand -base64 10)
        ENCPW=$(echo $PW | gpg -r $RECIPIENT --encrypt | openssl base64 -A)
        tar -cf - "$INPUT_DATA" |
        openssl enc -aes-256-cbc -a -pass file:<( echo $PW ) |
        tacl_data --tsd_api_key \
            --encryptedpw $ENCPW \
            --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0
    elif [[ $PRE == *"archive"* ]] && [[ $PRE == *"compress"* ]]; then
        echo 'data import with tar and gzip'
        optionally_append_extension_to_file $POST "$INPUT_DATA" 'tar.gz'
        tar -cf - "$INPUT_DATA" | gzip -9 |
        tacl_data --tsd_api_key \
            --env $API_ENV --pnum $PNUM --group $GROUP \
            --post $POST --data "$dest_file" --backend $BACKEND \
            --user_name $USERNAME --password $PASSWORD --otp $OTP -
        exit 0
    fi
}

export_data() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --env)          shift; API_ENV=$1; shift ;;
            --export-list)  shift; SHOW="true"; ;;
            --export)       shift; FILENAME=$1; shift ;;
            --download-id)  shift; ETAG=$1; shift ;;
            --backend)      shift; BACKEND=$1; shift ;;
            *)              shift ;;
        esac
    done

    if [[ $API_ENV == '' ]]; then
        API_ENV='prod'
    fi

    PNUM=$(pnum_from_uname $USERNAME)

    if [[ $SHOW == "true" ]]; then
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM --show \
            --backend $BACKEND --user_name $USERNAME --password $PASSWORD --otp $OTP
        exit 0
    else
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM --export $FILENAME \
            --backend $BACKEND --user_name $USERNAME --password $PASSWORD --otp $OTP
        exit 0
        if [[ ! -z $ETAG  ]]; then
            tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM --export $FILENAME \
                --backend $BACKEND --user_name $USERNAME --password $PASSWORD --otp $OTP --download-id $ETAG
        else
            tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM --export $FILENAME \
                --backend $BACKEND --user_name $USERNAME --password $PASSWORD --otp $OTP
            exit 0
        fi
    fi
    exit 0
}

manage_resumables() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --env)                  shift; API_ENV=$1; shift ;;
            --resume-list)          shift; LISTALL="true"; ;;
            --resume-delete)        shift; RDEL=$1; shift ;;
            --resume-delete-all)    shift; RDELALL="true"; shift ;;
            --upload-id)            shift; UPLOAD_ID=$1; shift ;;
            --pnum)                 shift; PNUM=$1; shift ;;
            --backend)              shift; BACKEND=$1; shift ;;
            *)                      shift ;;
        esac
    done

    if [[ $API_ENV == '' ]]; then
        API_ENV='prod'
    fi

    if [[ -z $PNUM ]]; then
        PNUM=$(pnum_from_uname $USERNAME)
    fi

    if [[ $LISTALL == "true" ]]; then
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM \
            --user_name $USERNAME --password $PASSWORD --otp $OTP \
            --backend $BACKEND --resume-list
        exit 0
    elif [[ ! -z $RDEL ]]; then
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM \
            --user_name $USERNAME --password $PASSWORD --otp $OTP \
            --backend $BACKEND --resume-delete $RDEL --upload-id $UPLOAD_ID
        exit 0
    elif [[ $RDELALL == "true" ]]; then
        tacl_data --tsd_api_key --env $API_ENV --pnum $PNUM \
            --user_name $USERNAME --password $PASSWORD --otp $OTP \
            --backend $BACKEND --resume-delete-all
        exit 0
    fi
}


if [[ $1 == '--help' ]]; then
    tacl_data --help
    exit 0
elif [[ $1 =~ ^('--data-guide'|'--examples') ]]; then
    tacl_data --guide
    exit 0
elif [[ $1 == '--admin-guide' ]]; then
    tacl_admin --guide
    exit 0
elif [[ $1 == '--show-config' ]]; then
    tacl_admin --show-config
    exit 0
elif [[ $1 == '--del-config' ]]; then
    tacl_admin --del-config
    exit 0
fi


args=("$@")
BACKEND='files' # default
for i in ${args[*]}; do
    if [[ $i == '--register' ]]; then
        tacl_admin --register_tsd_2fa
        exit 0
    elif [[ $i =~ ^('--signup'|'--confirm'|'--getapikey'|'--delapikey'|'--pwreset') ]]; then
        tacl_admin $@
        exit 0
    elif [[ $i =~ ^('--data'|'--import') ]]; then
        collect_credentials $@
        import_data $@
        exit 0
    elif [[ $i =~ ^('--export-list'|'--export') ]]; then
        collect_credentials $@
        export_data $@
        exit 0
    elif [[ $i =~ ^('--resume-list'|'--resume-delete'|'--resume-delete-all') ]]; then
        collect_credentials $@
        manage_resumables $@
        exit 0
    fi
done
