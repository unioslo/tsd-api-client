#!/bin env python3

"""API client for data uploads."""

import os
import sys


import click
import requests

from tsdapiclient.authapi import get_jwt_tsd_auth, get_jwt_basic_auth
from tsdapiclient.client_config import ENV
from tsdapiclient.configurer import read_config
from tsdapiclient.fileapi import streamfile, streamstdin, export_list, export_get, \
                                 get_resumable, initiate_resumable, print_resumables_list, \
                                 delete_resumable, delete_all_resumables, print_export_list
from tsdapiclient.tools import _check_present, user_agent, check_if_key_has_expired


requests.utils.default_user_agent = user_agent


def print_basic_help():
    help_text = """
        TSD API client command-line tool: tacl
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        Usage: tacl [OPTIONS]

        Options
        ~~~~~~~

        --env                   Either 'test' or 'prod' environment. Defaults to 'prod'.
        --import                Path to file or folder you want to upload.
                                This needs to be the last argument you pass to tacl.
        --upload-id             Resume a specific upload, providing the upload ID.
        --resume-list           Get an overview of all resumable uploads.
        --resume-delete         Delete a specific incomplete resumable upload.
        --resume-delete-all     Delete all incomplete resumable upload.
        --chunk-size            Optional chunk size (in Megabytes) specification for resumable uploads.
        --export-list           List files available for export.
        --export                Name of the file you want to download.
        --download-id           Unique identifier used to resume a download.

        Optional data pipeline parameters (not relevant to resume or sync):

        --pre                   Comma-separated string specifying pre-upload data processing:
                                    - 'archive': create a tarball
                                    - 'compress': use gzip compression
                                    - 'encrypt': encrypt data using AES
        --post                  Comma-separated string specifying post-upload data processing (server-side):
                                    - 'restore': restore the tarball to a directory
                                    - 'decompress': decompress data
                                    - 'decrypt': decrypt data
        --recipient             GPG recipient - only when using 'encrypt' or 'decrypt' in pre and/or post
                                expression.
        --group                 Name of the TSD file group which should have permissions on the upload.
    """
    print(help_text)


def print_data_guide():
    guide_text = """\

        Register your API client
        ~~~~~~~~~~~~~~~~~~~~~~~~

        tacl --register # choose 'prod'


        Importing data to TSD
        ~~~~~~~~~~~~~~~~~~~~~

        tacl --import example.tar.gz
        tacl --import example.tar.gz --group p11-restricted-group
        tacl --import example.tar.gz --post 'restore,decompress'
        tacl --import myfile --pre 'compress' --post 'decompress'
        tacl --import mydir --pre 'archive,compress'
        tacl --import mydir --pre 'archive,compress' --post 'restore,decompress'


        Working with resumable uploads
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        tacl --import myfile # files larger than 1gb will automatically be resumable
        tacl --import myfile --upload-id 52928fed-8c29-4135-88e9-27f2c0bec526
        tacl --resume-list
        tacl --resume-delete myfile --upload-id 52928fed-8c29-4135-88e9-27f2c0bec526
        tacl --resume-delete-all


        Exporting data from TSD
        ~~~~~~~~~~~~~~~~~~~~~~~

        tacl --export-list
        tacl --export mydir.zip
        tacl --export mydir.zip --download-id 869b432d7703e62134fcca775c98ba38 # to resume a partial download


        Using basic authentication for automation
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        After you have registered your client with TSD, you can perform data import
        tasks without Two Factor Authentication, if your IP address has been
        whitelisted with TSD. To request this, contact tsd-drift@usit.uio.no. To
        use basic auth, simply add the --pnum pXX flag to your commands:

        tacl --pnum p11 --import mydata
        tacl --pnum p11 --resume-list

        Please note this will not work with data export.


        API docs
        ~~~~~~~~
        https://data.tsd.usit.no/api/tsd-api-integration.html

    """
    print(guide_text)


def parse_post_processing_expression(expr, encryptedpw):
    """
    Map expressions to custom headers.

    Params
    ------
    expr: str
        e.g. 'restore,decompress,decrypt'
    encryptedpw: str
        base64 encoded, gpg encrypted, AES secrek key

    Returns
    -------
    dict

    """
    if expr == 'none':
        return {'Content-Type': 'application/octet-stream'}
    elif expr == 'decrypt':
        return {'Content-Type': 'application/aes',
                'Aes-Key': encryptedpw}
    elif expr == 'decompress':
        return {'Content-Type': 'application/gz'}
    elif 'decompress' in expr and 'decrypt' in expr:
        return {'Content-Type': 'application/gz.aes',
                'Aes-Key': encryptedpw}
    elif expr == 'restore':
        return {'Content-Type': 'application/tar'}
    elif 'restore' in expr and 'decompress' in expr and 'decrypt' in expr:
        return {'Content-Type': 'application/tar.gz.aes',
                'Aes-Key': encryptedpw}
    elif 'restore' in expr and 'decrypt' in expr:
        return {'Content-Type': 'application/tar.aes',
                'Aes-Key': encryptedpw}
    elif 'restore' in expr and 'decompress' in expr:
        return {'Content-Type': 'application/tar.gz'}
    else:
        print('expression not parseable')
        raise Exception


def get_token(tsd_api_key, env, pnum, data, fileinput,
              resume_list, resume_delete, resume_delete_all,
              show, export, user_name, password, otp, backend):
    try:
        api_key = read_config()[env][pnum]
        try:
            has_exired = check_if_key_has_expired(api_key)
            if has_exired:
                print('Your API key has expired')
                print('Register your client again')
                return
        except Exception:
            pass # cannot figure it out :(
        if data or fileinput or resume_list or resume_delete or resume_delete_all:
            token_type = 'import'
        elif show or export:
            token_type = 'export'
        elif backend == 'cluster' and pnum == 'p01':
            token_type = 'admin'
        token = None
        if user_name != 'null':
            token = get_jwt_tsd_auth(env, pnum, api_key, user_name, password, otp, token_type)
        if not token:
            token = get_jwt_basic_auth(env, pnum, api_key)
        return token
    except Exception as e:
        print(e)
        return None


@click.command()
@click.option('--env', default='test', help='which environment you want to interact with')
@click.option('--pnum', default=None, help='project numbers')
@click.option('--config', default=None, help='path to config file')
@click.option('--guide', is_flag=True, default=False, required=False, help='print help text')
@click.option('--data', default=None, required=False, help='path to file')
@click.option('--user_name', default=None, help='TSD project user name')
@click.option('--password', default=None, help='TSD password')
@click.option('--otp', default=None, help='one time passcode')
@click.option('--encryptedpw', default=None, required=False, help='encrypted password used in symmetric data encryption')
@click.option('--pre', default=None, required=False, help='pre processing expression')
@click.option('--post', default='none', required=False, help='post processing expression')
@click.option('--tsd_api_key', is_flag=True, default=False, help='use project specific TSD api key')
@click.option('--group', default=None, required=False, help='which group should have permission on upload')
@click.option('--show', is_flag=True, default=None, required=False, help='list files available for export')
@click.option('--export', default=None, required=False, help='download a file')
@click.option('--upload-id', default=None, required=False, help='resumable upload ID')
@click.option('--resume-list', is_flag=True, required=False, help='list all uploads which can be resumed')
@click.option('--resume-delete', default=None, required=False, help='delete an incomplete resumable upload')
@click.option('--chunk-size', default=None, required=False, help='chunk size for resumable upload')
@click.option('--resume-delete-all', is_flag=True, required=False, help='delete all incomplete resumable uploads')
@click.option('--download-id', default=None, required=False, help='Etag used to ensure intergity when resuming a download')
@click.option('--backend', default='files', required=False, help='upload to cluster filesystem')
@click.option('--help', is_flag=True, required=False, help='basic help')
@click.argument('fileinput', type=click.File('rb'), required=False, default=None)
def main(env, pnum, config, guide, data, user_name,
         password, otp, encryptedpw, pre, post, tsd_api_key, group,
         show, export, upload_id, resume_list, resume_delete, fileinput,
         chunk_size, resume_delete_all, download_id, backend, help):
    if help:
        print_basic_help()
        return
    if guide:
        print_data_guide()
        return
    if env not in ['test', 'prod']:
        print('unknown env')
        sys.exit(1)
    _check_present(env, 'env')
    _check_present(pnum, 'pnum')
    if backend is None or backend == '':
        backend = 'files' # default to HNAS
    if backend not in ['files', 'cluster']:
        print('unknown backend, legal values: files, cluster')
        sys.exit(1)
    if data or show or export or resume_list or resume_delete or resume_delete_all:
        _check_present(user_name, 'user_name')
        _check_present(password, 'password')
        _check_present(otp, 'otp')
        if not group:
            group = pnum + '-member-group'
        try:
            custom_headers = parse_post_processing_expression(post, encryptedpw)
        except Exception:
            print('Cannot proceed - unclear data pipeline specification')
            return
        token = get_token(tsd_api_key, env, pnum, data, fileinput,
                          resume_list, resume_delete, resume_delete_all,
                          show, export, user_name, password, otp, backend)
        if not token:
            print('Authentication failed')
            return
        else:
            if not fileinput and data:
                if upload_id or os.stat(data).st_size > 1000*1000*1000:
                    if not chunk_size:
                        chunk_size = 1000*1000*50
                    else:
                        chunk_size = 1000*1000*chunk_size # user specifies MB input
                    resp = initiate_resumable(env, pnum, data, token, chunksize=chunk_size,
                                              group=group, verify=True, upload_id=upload_id,
                                              backend=backend)
                    return
                else:
                    resp = streamfile(env, pnum, data, token, custom_headers=custom_headers,
                                      group=group, backend=backend)
                    return
            elif fileinput:
                resp = streamstdin(env, pnum, fileinput, data, token, custom_headers=custom_headers,
                                   group=group, backend=backend)
                if resp.status_code == 201:
                    return
                else:
                    print('Data import failed: {0}'.format(resp.text))
            elif show:
                data = export_list(env, pnum, token, backend=backend)
                print_export_list(data)
                return
            elif export:
                filename = export
                export_get(env, pnum, filename, token, etag=download_id, backend=backend)
                return
            elif resume_list:
                overview = get_resumable(env, pnum, token, backend=backend)
                print_resumables_list(overview)
                return
            elif resume_delete:
                filename = resume_delete
                delete_resumable(env, pnum, token, filename, upload_id, backend=backend)
                return
            elif resume_delete_all:
                delete_all_resumables(env, pnum, token, backend=backend)
                return
            elif resume_list:
                overview = get_resumable(env, pnum, token, backend=backend)
                print_resumables_list(overview)
                return
            elif resume_delete:
                filename = resume_delete
                delete_resumable(env, pnum, token, filename, upload_id, backend=backend)
                return
            elif resume_delete_all:
                delete_all_resumables(env, pnum, token, backend=backend)
                return
            return
    else:
        print('Didn\'t do anything - missing input?')
        return

if __name__ == '__main__':
    main()
